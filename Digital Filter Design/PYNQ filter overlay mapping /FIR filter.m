[x,Fs] = audioread('audio.wav'); % Reading in audio file

% Plot to find out which frequency to remove from signal

% Fourier Transform
nfft = 2^10; % FFT size
X = fft(x, nfft); % Compute FFT of the signal

% Frequency vector generation
fstep = Fs/nfft; % Frequency resolution
fvec = fstep*(0:nfft/2-1); % Frequency vector

% Amplitud spectrum calculation
fresp = 2*abs(X(1:nfft/2)); % Magnitude of the single-sided spectrum

% Deriving the maximum frequency 
[max_amp, idx] = max(fresp); % "idx" is the index of the max_amp
max_freq = fvec(idx); % "max_freq" is the freq corresponding to max_amp

% Display the max freq
fprintf('Highest amp = %.2f Hz.\n', max_freq);

% Highpass filter design
Hd = highpasss_filter();
h = Hd.Numerator; % Getting filter coefficients
% Calculate the frequency response
[H, f] = freqz(h, 1, 1024, 48000);

% Apply filter to the signal
new_speech = filter(Hd, x);

X_filtered = fft(new_speech, nfft); % FFT of filtered signal
fresp_filtered = 2*abs(X_filtered(1:nfft/2)); % Magnitude of the filtered signal

% Plotting original vs filtered signal
figure;
plot(fvec, fresp, 'b', 'LineWidth',1.5);
hold on;
plot(fvec, fresp_filtered, 'r--', 'LineWidth', 1.5);
title('Original vs Filtered Signal Amplitud Spec')
xlabel('Frequency (Hz)')
ylabel(' |X(f)|')
legend('Original Signal', 'Filtered Signal')
hold off;


% Plotting original vs filtered signal in time domain
t = (0:length(x)-1) / Fs; % Time vector

figure; % Create another new figure
subplot(2,1,1);
plot(t, x, 'b');
title('Original Signal in Time Domain')
xlabel('Time (s)')
ylabel('Amplitude')

subplot(2,1,2);
plot(t, new_speech, 'r');
title('Filtered Signal in Time Domain')
xlabel('Time (s)')
ylabel('Amplitude')


% Write the filtered signal to the .wav file
audiowrite('filtered_speech.wav', new_speech, Fs);

function Hd = highpasss_filter
%HIGHPASSS_FILTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 24.2 and Signal Processing Toolbox 24.2.
% Generated on: 16-Oct-2024 17:29:28

% Equiripple Bandpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 48000;  % Sampling Frequency

Fstop1 = 100;             % First Stopband Frequency
Fpass1 = 400;             % First Passband Frequency
Fpass2 = 2000;            % Second Passband Frequency
Fstop2 = 2500;            % Second Stopband Frequency
Dstop1 = 0.1;             % First Stopband Attenuation
Dpass  = 0.057501127785;  % Passband Ripple
Dstop2 = 0.01;            % Second Stopband Attenuation
dens   = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fstop1 Fpass1 Fpass2 Fstop2]/(Fs/2), [0 1 ...
                          0], [Dstop1 Dpass Dstop2]);

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

% [EOF]

end
